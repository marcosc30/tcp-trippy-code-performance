1. **What are the key data structures that represent a connection?**

    - **NormalSocket**: Represents a TCP connection between a local and remote endpoint. It contains fields for local and remote ports, addresses, sequence numbers, and state variables for managing the connection. This is equivalent to the socket struct in the normal networks package in Go. Within the socket, we keep track of the snd and rcv structs which are also very important, since they keep track of the data flow variables, window size information, and have the relevant buffers.
    - **Sequence and Acknowledgment Numbers**: Variables like `snd.NXT` (next sequence number to send), `snd.UNA` (unacknowledged sequence number), and `rcv.NXT` (next sequence number expected) are what keeps track of the data communication between the sender and receiver, and we use it to follow the sending protocol, keep track of the data flow, and manage retransmissions.
    - **Window Sizes**: `snd.WND` and `rcv.WND` represent the sender and receiver window sizes, important for flow control.
    - **Buffers**:
      - **Send Buffer (`snd.buf`)**: Holds data to be sent to the remote endpoint.
      - **Receive Buffer (`rcv.buf`)**: Stores incoming data from the remote endpoint.
    - **In-Flight Packets**: A stack (`snd.inFlightPackets`) tracking packets that have been sent but not yet acknowledged, essential for handling retransmissions.
    - **TCPStack** This struct is for an entire client, keeping track of the TCP table, a mutex, etc. It is used to manage the connections and the sockets.
    - **Other Structs** There are a lot of other data structures that help us manage the connection, like the `TCPHeader` struct, which is used to create the TCP header, `EarlyData` to manage out of order packets, and more.

2. **At a high level, how does your TCP logic (sending, receiving, retransmissions, etc.) use threads, and how do they interact with each other (and your data structures)?**

    - **Main Thread**: Sets up IP and TCP , then handles user input from the REPL
    - **Receiving Goroutine**: This happens on the interface thread from IP, which is separate from the main thread, such that when a packet is received, the TCP handler function is called, which then goes through a series of cases based on the flags and state of the TCP connection to get the packet handled properly. 
    - **File Transfer Goroutine**: This is a separate goroutine that is created for sending and receiving files. 
    - **Retransmission Timer**: A timer that triggers retransmission of unacknowledged packets if an ACK is not received within a certain timeframe. We manage it based on the RFC guidelines (for when we should stop and reset the timer), and we have a goroutine that listens for the timer to expire and retransmits timers when it does. 
    - **Synchronization**: Mutexes are used to protect shared data structures like inflightpackets, ensuring that there are no race conditions with important structs.

3. **If you could do this assignment again, what would you change? Any ideas for how you might improve performance?**

    - **More Comprehensive Testing**: Implement a more extensive test suite that covers edge cases, error scenarios, and performance benchmarks to ensure robustness and reliability. I wasn't happy with having to test everything by hand and I feel that we may have missed out on certain edge cases that are hard to generate at such a small scale.
    - **More Efficient Retransmission**: Something about the Mutex and stack for tracking these packets, as well as keeping the data in them, doesn't feel very optimized at all. I believe this slows the performance down a lot and there must be a more efficient way to keep track of the packets in flight, as well as cleaning them which is also quite slow.

4. **If you have any other major bugs or limitations not mentioned in the previous question, please describe the bug and how you have tried to debug the problem**
We don't have any bugs that we know of, but like we mentioned, testing could've been more comprehensive. I also have a suspicion that the round trip time is not being computed until the TCP connection is established, when it should be computed based on the SYN and SYN-ACK packets since those are first (however, in theory, I think we should be doing that, it's just hard to test). We may also fail under certain drop conditions, but from what we tested we were fine.

**Packet Send Time Measurement**
- Reference: 
- Ours: 

**Packet Capture**